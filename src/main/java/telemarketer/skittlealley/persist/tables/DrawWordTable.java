/*
 * This file is generated by jOOQ.
 */
package telemarketer.skittlealley.persist.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import telemarketer.skittlealley.persist.Keys;
import telemarketer.skittlealley.persist.Public;
import telemarketer.skittlealley.persist.tables.records.DrawWordRecord;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.11.9"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DrawWordTable extends TableImpl<DrawWordRecord> {

    private static final long serialVersionUID = 221920642;

    /**
     * The reference instance of <code>PUBLIC.DRAW_WORD</code>
     */
    public static final DrawWordTable DRAW_WORD = new DrawWordTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DrawWordRecord> getRecordType() {
        return DrawWordRecord.class;
    }

    /**
     * The column <code>PUBLIC.DRAW_WORD.ID</code>.
     */
    public final TableField<DrawWordRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.DRAW_WORD.WORD</code>.
     */
    public final TableField<DrawWordRecord, String> WORD = createField("WORD", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.DRAW_WORD.WORD_TIP</code>.
     */
    public final TableField<DrawWordRecord, String> WORD_TIP = createField("WORD_TIP", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.DRAW_WORD</code> table reference
     */
    public DrawWordTable() {
        this(DSL.name("DRAW_WORD"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.DRAW_WORD</code> table reference
     */
    public DrawWordTable(String alias) {
        this(DSL.name(alias), DRAW_WORD);
    }

    /**
     * Create an aliased <code>PUBLIC.DRAW_WORD</code> table reference
     */
    public DrawWordTable(Name alias) {
        this(alias, DRAW_WORD);
    }

    private DrawWordTable(Name alias, Table<DrawWordRecord> aliased) {
        this(alias, aliased, null);
    }

    private DrawWordTable(Name alias, Table<DrawWordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> DrawWordTable(Table<O> child, ForeignKey<O, DrawWordRecord> key) {
        super(child, key, DRAW_WORD);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DrawWordRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DRAW_WORD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DrawWordRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_B;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DrawWordRecord>> getKeys() {
        return Arrays.<UniqueKey<DrawWordRecord>>asList(Keys.CONSTRAINT_B, Keys.CONSTRAINT_B0);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DrawWordTable as(String alias) {
        return new DrawWordTable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DrawWordTable as(Name alias) {
        return new DrawWordTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DrawWordTable rename(String name) {
        return new DrawWordTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DrawWordTable rename(Name name) {
        return new DrawWordTable(name, null);
    }
}
